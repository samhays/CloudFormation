Description: 
    This template deploys a VPC, with a pair of public, private and TCM subnets spread 
    across two Availability Zones. It deploys an Internet Gateway, with a default 
    route on the public subnets. It deploys a pair of NAT Gateways (one in each AZ), 
    and default routes for them in the TCM subnets.

Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
    VpcCIDR: 
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.192.0.0/16
    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.192.1.0/28
    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String
        Default: 10.192.2.0/28
    TCMSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the TCM subnet in the first Availability Zone
        Type: String
        Default: 10.192.3.0/28
    TCMSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the TCM subnet in the second Availability Zone
        Type: String
        Default: 10.192.4.0/28        
    PrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the private (workspaces) subnet in the first Availability Zone
        Type: String
        Default: 10.192.5.0/24
    PrivateSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the private (workspaces) subnet in the second Availability Zone
        Type: String
        Default: 10.192.6.0/24


Resources:
    VPC: 
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            Tags: 
                - Key: Name 
                  Value: !Ref EnvironmentName
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName
    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC
    PublicSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
    PublicSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
    TCMSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref TCMSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} TCM Subnet (AZ1)
    TCMSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref TCMSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} TCM Subnet (AZ2)
    PrivateSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)
    PrivateSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

    NatGateway1EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties: 
            Domain: vpc
    NatGateway2EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc
    NatGateway1: 
        Type: AWS::EC2::NatGateway
        Properties: 
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1
    NatGateway2: 
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway2EIP.AllocationId
            SubnetId: !Ref PublicSubnet2

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Routes
    DefaultPublicRoute: 
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties: 
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway
    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1
    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2

    TCMRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} TCM Routes (AZ1)
    DefaultTCMRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref TCMRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway1
    TCMSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref TCMRouteTable1
            SubnetId: !Ref TCMSubnet1

    TCMRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} TCM Routes (AZ2)
    DefaultTCMRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref TCMRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2
    TCMSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref TCMRouteTable2
            SubnetId: !Ref TCMSubnet2
    NoIngressSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: "no-ingress-sg"
            GroupDescription: "Security group with no ingress rule"
            VpcId: !Ref VPC
    PrivateRouteTable1:
       Type: AWS::EC2::RouteTable
       Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)
    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        DependsOn: VGWAttachment
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref VirtualPrivateGateway
    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1
    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ2)
    DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        DependsOn: VGWAttachment
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref VirtualPrivateGateway
    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2

    TCMElasticLoadBalancer:    
      Type: "AWS::ElasticLoadBalancing::LoadBalancer"
      Properties:
        CrossZone: True
        HealthCheck:
          Target: HTTPS:443/
          HealthyThreshold: '3'
          UnhealthyThreshold: '5'
          Interval: '30'
          Timeout: '5'
#        Instances:
#          - !Ref TCMInstance1
#          - !Ref TCMInstance2
        LoadBalancerName: TCM-LB
        Listeners:
        - LoadBalancerPort: '443'
          InstancePort: '443'
          Protocol: TCP
        Scheme: internal
#        SecurityGroups:
#          - Security Group
        Subnets:
          - !Ref TCMSubnet1 
          - !Ref TCMSubnet2
        Tags: 
          - Key: Name 
            Value: !Sub ${EnvironmentName} TCM-ElasticLoadBalancer
    VirtualPrivateGateway:     
      Type: "AWS::EC2::VPNGateway"
      Properties: 
        Type: ipsec.1
        Tags:
          - Key: Name 
            Value: !Sub ${EnvironmentName} VPC-VGW
    VGWAttachment:
      Type: "AWS::EC2::VPCGatewayAttachment"
      DependsOn: VirtualPrivateGateway
      Properties: 
        VpcId: !Ref VPC
        VpnGatewayId: !Ref VirtualPrivateGateway


    PrivateNetworkAcl:
        Type: "AWS::EC2::NetworkAcl"
        Properties:
            Tags:
              - Key: Name 
                Value: !Sub ${EnvironmentName} PrivateNetworkAcl
            VpcId:  !Ref VPC

    PrivateNetworkAclEntryEgress1:
        Type: "AWS::EC2::NetworkAclEntry"
        DependsOn: PrivateNetworkAcl
        Properties: 
            CidrBlock: !Ref PublicSubnet1CIDR
            Egress: true
            NetworkAclId: !Ref PrivateNetworkAcl
            Protocol: -1
            RuleAction : deny
            RuleNumber : 1
    PrivateNetworkAclEntryEgress2:
        Type: "AWS::EC2::NetworkAclEntry"
        DependsOn: PrivateNetworkAcl
        Properties: 
            CidrBlock: !Ref TCMSubnet1CIDR
            Egress: true
            NetworkAclId: !Ref PrivateNetworkAcl
            Protocol: -1
            RuleAction : deny
            RuleNumber : 2
    PrivateNetworkAclEntryEgress3:
        Type: "AWS::EC2::NetworkAclEntry"
        DependsOn: PrivateNetworkAcl
        Properties: 
            CidrBlock: !Ref PublicSubnet2CIDR
            Egress: true
            NetworkAclId: !Ref PrivateNetworkAcl
            Protocol: -1
            RuleAction : deny
            RuleNumber : 3
    PrivateNetworkAclEntryEgress4:
        Type: "AWS::EC2::NetworkAclEntry"
        DependsOn: PrivateNetworkAcl
        Properties: 
            CidrBlock: !Ref TCMSubnet2CIDR
            Egress: true
            NetworkAclId: !Ref PrivateNetworkAcl
            Protocol: -1
            RuleAction : deny
            RuleNumber : 4

    PrivateNetworkAclEntryIngress1:
        Type: "AWS::EC2::NetworkAclEntry"
        Properties: 
            CidrBlock: !Ref PublicSubnet1CIDR
            Egress: false
            NetworkAclId: !Ref PrivateNetworkAcl
            Protocol: -1
            RuleAction : deny
            RuleNumber : 1
    PrivateNetworkAclEntryIngress2:
        Type: "AWS::EC2::NetworkAclEntry"
        DependsOn: PrivateNetworkAcl
        Properties: 
            CidrBlock: !Ref TCMSubnet1CIDR
            Egress: false
            NetworkAclId: !Ref PrivateNetworkAcl
            Protocol: -1
            RuleAction : deny
            RuleNumber : 2
    PrivateNetworkAclEntryIngress3:
        Type: "AWS::EC2::NetworkAclEntry"
        DependsOn: PrivateNetworkAcl
        Properties: 
            CidrBlock: !Ref PublicSubnet2CIDR
            Egress: false
            NetworkAclId: !Ref PrivateNetworkAcl
            Protocol: -1
            RuleAction : deny
            RuleNumber : 3
    PrivateNetworkAclEntryIngress4:
        Type: "AWS::EC2::NetworkAclEntry"
        DependsOn: PrivateNetworkAcl
        Properties: 
            CidrBlock: !Ref TCMSubnet2CIDR
            Egress: false
            NetworkAclId: !Ref PrivateNetworkAcl
            Protocol: -1
            RuleAction : deny
            RuleNumber : 4

    PrivateNetworkAclAssociation1:
        Type: "AWS::EC2::SubnetNetworkAclAssociation"
        DependsOn:
         - PrivateSubnet1
         - PrivateNetworkAcl
        Properties:
            SubnetId: !Ref PrivateSubnet1
            NetworkAclId: !Ref PrivateNetworkAcl 
    PrivateNetworkAclAssociation2:
        Type: "AWS::EC2::SubnetNetworkAclAssociation"
        DependsOn:
         - PrivateSubnet2
         - PrivateNetworkAcl
        Properties:
            SubnetId: !Ref PrivateSubnet2
            NetworkAclId: !Ref PrivateNetworkAcl 

Outputs: 
    VPC: 
        Description: A reference to the created VPC
        Value: !Ref VPC
    PublicSubnets:
        Description: A list of the public subnets
        Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
    PrivateSubnets:
        Description: A list of the private subnets
        Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
    PublicSubnet1:
        Description: A reference to the public subnet in the 1st Availability Zone
        Value: !Ref PublicSubnet1
    PublicSubnet2: 
        Description: A reference to the public subnet in the 2nd Availability Zone
        Value: !Ref PublicSubnet2
    PrivateSubnet1:
        Description: A reference to the private subnet in the 1st Availability Zone
        Value: !Ref PrivateSubnet1
    PrivateSubnet2: 
        Description: A reference to the private subnet in the 2nd Availability Zone
        Value: !Ref PrivateSubnet2
    TCMSubnet1:
        Description: A reference to the TCM subnet in the 1st Availability Zone
        Value: !Ref TCMSubnet1
    TCMSubnet2: 
        Description: A reference to the TCM subnet in the 2nd Availability Zone
        Value: !Ref TCMSubnet2
    TCMElasticLoadBalancer: 
        Description: A reference to the TCM elastic load balancer
        Value: !Ref TCMElasticLoadBalancer
    NoIngressSecurityGroup:
        Description: Security group with no ingress rule
        Value: !Ref NoIngressSecurityGroup

# TODO
# AD connector
#TCM's
#SG's
#NACL's